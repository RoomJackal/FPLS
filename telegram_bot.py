import os
import pickle
import telebot
import numpy as np
import pandas as pd
from lightfm import LightFM
from dotenv import load_dotenv
from telebot.types import ReplyKeyboardMarkup, KeyboardButton

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
with open('model/FPLS_lightfm_model.pickle', 'rb') as f:
    model_data = pickle.load(f)

# –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –º–æ–¥–µ–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
lightfm_model = model_data['model']
df_lightfm = model_data['dataset']
item_features = model_data['item_features']
df_merged = model_data['df_merged']
df_matrix = model_data['df_matrix']

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
def recommendations_goods_for_stores(store_name, product_category, number_recommendations):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏ –≤ –¥–∞—Ç–∞—Å–µ—Ç–µ
    if store_name not in df_matrix.columns:
        return (f'–¢–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞ - {store_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    candidate_products = df_merged[(df_merged['product_category'] == product_category)]
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–µ
    if candidate_products.empty:
        return (f'–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫—É–ø–∫–∞—Ö –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - {product_category} –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏ - {store_name}')  
    # –õ–∏—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å—Å—è
    product_names = candidate_products['product_name'].values
    try:
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞ –¥–ª—è –º–æ–¥–µ–ª–∏
        store_id = df_lightfm.mapping()[0][store_name]
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
        product_id = [df_lightfm.mapping()[2][p] for p in product_names if p in df_lightfm.mapping()[2]]
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        generating_recommendations = lightfm_model.predict(store_id, product_id, item_features = item_features)
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —É–±—ã–≤–∞–Ω–∏—é –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫ –∏ –≤—ã–±–æ—Ä —Ç–æ–ø-n —Ç–æ–≤–∞—Ä–æ–≤
        ratings_recommendations = np.argsort(-generating_recommendations)[:number_recommendations]
        top_product_names = [product_names[i] for i in ratings_recommendations]
        
        # –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
        return df_merged[df_merged['product_name'].isin(top_product_names)][['product_name', 'product_category', 'abc_classification', 'total_realization']]
    except KeyError as e:
        return (f'–û—à–∏–±–∫–∞: {str(e)}')

# –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫
store_names = list(df_matrix.columns)
# –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤
product_categories = df_merged['product_category'].unique()

# –°—á–∏—Ç—ã–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞
try:
    with open('telegram_bot_key.txt', 'r') as file:
        tg_token = file.read().strip()
    if not tg_token:
        raise ValueError('–§–∞–π–ª –ø—É—Å—Ç–æ–π')
    tg_bot = telebot.TeleBot(tg_token)
except FileNotFoundError:
    print('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–π')
except ValueError as ve:
    print(f'–û—à–∏–±–∫–∞: {ve}')
except Exception as e:
    print(f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}')

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞
selected_product_category = None
# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
selected_store_name = None
# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Ç—Å–≤–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
selected_number_recommendations = 0

# –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –±–æ—Ç–∞
def show_main_menu(message):
    markup = ReplyKeyboardMarkup(resize_keyboard = True)
    markup.add(KeyboardButton('üéØ –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏'))
    tg_bot.send_message(message.chat.id, 'üöÄ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π', reply_markup = markup)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
@tg_bot.message_handler(commands = ['start'])
def start(message):
    markup = ReplyKeyboardMarkup(resize_keyboard = True)
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ '–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏'
    markup.add(KeyboardButton('üéØ –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏'))
    # –í—ã–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä–µ–¥ –∫–Ω–æ–ø–∫–æ–π
    tg_bot.send_message(message.chat.id,'üöÄ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π', reply_markup = markup)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞
@tg_bot.message_handler(func = lambda message: message.text == 'üéØ –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏')
def product_category_selection(message):
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏, –≥–¥–µ –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ - –æ–¥–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞
    markup = ReplyKeyboardMarkup(resize_keyboard = True, one_time_keyboard = True)
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞
    for product_category in product_categories:
        markup.add(KeyboardButton(product_category))
    # –í—ã–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä–µ–¥ –∫–Ω–æ–ø–∫–∞–º–∏
    tg_bot.send_message(message.chat.id, 'üè∑ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞', reply_markup = markup)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞
@tg_bot.message_handler(func = lambda message: message.text in product_categories)
def saved_product_category(message):
    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞
    global selected_product_category
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞
    selected_product_category = message.text
    # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
    store_name_selection(message)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
def store_name_selection(message):
     # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏, –≥–¥–µ –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ - –æ–¥–Ω–∞ —Ç–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞
    markup = ReplyKeyboardMarkup(resize_keyboard = True, one_time_keyboard = True)
     # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
    for store_name in store_names:
        markup.add(KeyboardButton(store_name))
    # –í—ã–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä–µ–¥ –∫–Ω–æ–ø–∫–∞–º–∏
    tg_bot.send_message(message.chat.id, 'üè™ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é —Ç–æ—á–∫—É', reply_markup = markup)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
@tg_bot.message_handler(func=lambda message: message.text in store_names)
def saved_store_name(message):
    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
    global selected_store_name
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏
    selected_store_name = message.text
    # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Ç—Å–≤–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    number_recommendations_selection(message)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
def number_recommendations_selection(message):
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏, –≥–¥–µ –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ - –∫–æ–ª–∏–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    markup = ReplyKeyboardMarkup(resize_keyboard = True, one_time_keyboard = True)
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —Ä—è–¥–∞ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    markup.row(KeyboardButton('3'), KeyboardButton('6'))
    # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ —Ä—è–¥–∞ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    markup.row(KeyboardButton('9'), KeyboardButton('12'))
    # –í—ã–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä–µ–¥ –∫–Ω–æ–ø–∫–∞–º–∏
    tg_bot.send_message(message.chat.id, 'üî¢ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π', reply_markup = markup)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Ç—Å–≤–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
@tg_bot.message_handler(func = lambda message: message.text in ['3', '6', '9', '12'])
def saved_number_recommendations(message):
    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Ç—Å–≤–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    global selected_number_recommendations, selected_product_category, selected_store_name
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Ç—Å–≤–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    selected_number_recommendations = int(message.text)
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏, –≥–¥–µ –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ - –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π, –≤—Ç–æ—Ä–∞—è - –Ω–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–Ω–∞—á–∞–ª–∞
    markup = ReplyKeyboardMarkup(resize_keyboard = True, row_width = 2)
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫, –≥–¥–µ –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ - –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π, –≤—Ç–æ—Ä–∞—è - –Ω–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–Ω–∞—á–∞–ª–∞
    markup.add(KeyboardButton('‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏'), KeyboardButton('üîÑ –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ'))
    # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
    info = (
        "üìã <b>–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>\n\n"
        f"  üè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞: <i>{selected_product_category}</i>\n"
        f"  üè™ –¢–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞: <i>{selected_store_name}</i>\n"
        f"  üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: <i>{selected_number_recommendations}</i>\n\n"
        "üìå –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
    tg_bot.send_message(message.chat.id, info, reply_markup = markup, parse_mode = 'HTML')

# –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
@tg_bot.message_handler(func = lambda message: message.text == 'üîÑ –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ')
def restart_process(message):
    product_category_selection(message)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
@tg_bot.message_handler(func = lambda message: message.text == '‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏')
def output_recommendations(message):
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏–∑ –º–æ–¥–µ–ª–∏
        recommendations = recommendations_goods_for_stores(store_name = selected_store_name, product_category = selected_product_category, number_recommendations = selected_number_recommendations)
        # –ï—Å–ª–∏ –Ω–∞ –≤—ã—Ö–æ–¥–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, —Ç–æ –≤—ã–≤–æ–¥–∏–º –µ—ë
        if isinstance(recommendations, str):
            tg_bot.send_message(message.chat.id, recommendations)
        # –ò–Ω–∞—á–µ, –µ—Å–ª–∏ –¥–∞—Ç–∞—Å–µ—Ç, —Ç–æ –≤—ã–≤–æ–¥–∏–º –µ–≥–æ 
        else:
            # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–≤–µ—á–∞—é—â–µ–π –∑–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            result = recommendation_output_format(recommendations)
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            tg_bot.send_message(message.chat.id, result, parse_mode = 'HTML')
    except Exception as e:
        # –í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –∏—Å–∫–ª—é—á–µ–Ω–∏–∏
        error_message = (f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:\n{str(e)}')
        # –í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –∏—Å–∫–ª—é—á–µ–Ω–∏–∏
        tg_bot.send_message(message.chat.id, error_message)
    finally:
        show_main_menu(message)

#–§—É–Ω–∫—Ü–∏—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
def recommendation_output_format(recommendations):
    count = 1
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤—ã–≤–æ–¥–æ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    message = "<b>üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º:</b>\n\n"
    # –í—ã–≤–æ–¥ –≤—Å–µ—Ö —Ä–µ–∫–º–æ–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ 
    for i, row in recommendations.iterrows():
        message += (
            f"<b>‚Ññ {count}</b> üçé –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ - <i>{row['product_name']}</i>\n"
            f"  üè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞ - <i>{row['product_category']}</i>\n"
            f"  ‚öñÔ∏è ABC-–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è - <i>{row['abc_classification']}</i>\n\n"
        )
        count += 1
    return message

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞
@tg_bot.message_handler(commands = ['stop'])
def stop_bot(message):
    tg_bot.send_message(message.chat.id, '–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
    tg_bot.stop_polling()
    exit(0)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
tg_bot.polling(none_stop = True)